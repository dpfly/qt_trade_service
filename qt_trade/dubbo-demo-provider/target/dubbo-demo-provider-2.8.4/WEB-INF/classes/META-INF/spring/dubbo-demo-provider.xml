<?xml version="1.0" encoding="UTF-8"?>
<!-- - Copyright 1999-2011 Alibaba Group. - - Licensed under the Apache License, 
	Version 2.0 (the "License"); - you may not use this file except in compliance 
	with the License. - You may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 
	- - Unless required by applicable law or agreed to in writing, software - 
	distributed under the License is distributed on an "AS IS" BASIS, - WITHOUT 
	WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the 
	License for the specific language governing permissions and - limitations 
	under the License. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<dubbo:application name="demo-provider" owner="programmer"
		organization="dubbox" />

	<dubbo:registry address="zookeeper://192.155.3.9:2181" />

	<!--uncomment this if you want to test dubbo's monitor -->
	<!--<dubbo:monitor protocol="registry"/> -->

	<!-- here we demonstrate both annotation-based and xml-based configs -->
	<dubbo:annotation package="com.alibaba.dubbo.demo.user.facade" />

	<dubbo:protocol name="dubbo" serialization="kryo"
		optimizer="com.alibaba.dubbo.demo.SerializationOptimizerImpl" />
	<!--<dubbo:protocol name="dubbo" serialization="fst" optimizer="com.alibaba.dubbo.demo.SerializationOptimizerImpl"/> -->

	<!--<dubbo:protocol name="dubbo" serialization="nativejava"/> -->
	<!--<dubbo:protocol name="dubbo" serialization="hessian2"/> -->
	<!--<dubbo:protocol name="dubbo" serialization="fastjson"/> -->
	<!--<dubbo:protocol name="dubbo" serialization="dubbo"/> -->


	<!--TODO according to the spring convention, we should use something like 
		keep-alive -->
	<!-- use netty server -->
	<!--<dubbo:protocol name="rest" port="8888" keepalive="true" server="netty" 
		iothreads="5" threads="100" contextpath="services"/> -->

	<!-- use tjws server -->
	<!--<dubbo:protocol name="rest" port="8888" server="tjws" contextpath="services"/> -->

	<!-- use tomcat server -->
	<dubbo:protocol name="rest" port="8888" threads="500"
		contextpath="services" server="tomcat" accepts="500"
		extension="com.alibaba.dubbo.demo.extension.TraceInterceptor,
                    com.alibaba.dubbo.demo.extension.TraceFilter,
                    com.alibaba.dubbo.demo.extension.ClientTraceFilter,
                    com.alibaba.dubbo.demo.extension.DynamicTraceBinding,
                    com.alibaba.dubbo.demo.extension.CustomExceptionMapper,
                    com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter" />

	<!-- use the external tomcat or other server with the servlet approach; 
		the port and contextpath must be exactly the same as those in external server -->
	<!--<dubbo:protocol name="rest" port="8888" contextpath="services" server="servlet"/> -->

	<dubbo:protocol name="http" port="8889" />
	<dubbo:protocol name="hessian" port="8890" />
	<dubbo:protocol name="webservice" port="8892" />

	<dubbo:service interface="com.alibaba.dubbo.demo.bid.BidService"
		ref="bidService" protocol="dubbo" />

	<!-- we add the group property since there's another annotation-configured 
		service impl: com.alibaba.dubbo.demo.user.facade.AnnotationDrivenUserRestServiceImpl -->
	<dubbo:service interface="com.alibaba.dubbo.demo.user.UserService"
		ref="userService" protocol="dubbo" group="xmlConfig" />

	<dubbo:service interface="com.alibaba.dubbo.demo.user.facade.UserRestService"
		ref="userRestService" protocol="rest" validation="true" />
	<dubbo:service
		interface="com.alibaba.dubbo.demo.user.facade.AnotherUserRestService"
		ref="anotherUserRestService" protocol="rest" timeout="2000"
		connections="100" validation="true" />

	<dubbo:service interface="com.alibaba.dubbo.demo.Deviate.IDeviateService"
		ref="deviateService" protocol="dubbo" group="xmlConfig" />

	<dubbo:service interface="com.alibaba.dubbo.demo.Deviate.IDeviateRestService"
		ref="deviateRestService" protocol="rest" validation="true" />
	<!-- 交易 -->
	<dubbo:service interface="com.alibaba.dubbo.demo.trade.ITradeService"
		ref="tradeService" protocol="dubbo" group="xmlConfig" />

	<dubbo:service interface="com.alibaba.dubbo.demo.trade.ITradeRestService"
		ref="tradeRestService" protocol="rest" validation="true" />

	<!-- 30日线 -->

	<dubbo:service interface="com.alibaba.dubbo.demo.code.ICodeService"
		ref="codeService" protocol="dubbo" group="xmlConfig" />

	<dubbo:service interface="com.alibaba.dubbo.demo.code.ICodeRestService"
		ref="codeRestService" protocol="rest" validation="true" />

	<!-- 持仓信息 -->

	<dubbo:service interface="com.alibaba.dubbo.demo.inventory.IInventoryService"
		ref="inventoryService" protocol="dubbo" group="xmlConfig" />

	<dubbo:service interface="com.alibaba.dubbo.demo.inventory.IInventoryRestService"
		ref="inventoryRestService" protocol="rest" validation="true" />
	<!-- 账户信息 -->

	<dubbo:service interface="com.alibaba.dubbo.demo.account.IAccountService"
		ref="accountService" protocol="dubbo" group="xmlConfig" />

	<dubbo:service interface="com.alibaba.dubbo.demo.account.IAccountRestService"
		ref="accountRestService" protocol="rest" validation="true" />
	<!-- 梯形股票 -->
	<dubbo:service interface="com.alibaba.dubbo.demo.ladder.ILadderService"
		ref="ladderService" protocol="dubbo" group="xmlConfig" />

	<dubbo:service interface="com.alibaba.dubbo.demo.ladder.ILadderRestService"
		ref="ladderRestService" protocol="rest" validation="true" />


	<bean id="bidService" class="com.alibaba.dubbo.demo.bid.BidServiceImpl" />

	<bean id="userService" class="com.alibaba.dubbo.demo.user.UserServiceImpl" />

	<bean id="userRestService" class="com.alibaba.dubbo.demo.user.facade.UserRestServiceImpl">
		<property name="userService" ref="userService" />
	</bean>

	<bean id="deviateService" class="com.alibaba.dubbo.demo.Deviate.Impl.DeviateServiceImpl" />

	<bean id="deviateRestService"
		class="com.alibaba.dubbo.demo.Deviate.rest.DeviateRestServiceImpl">
		<property name="deviateService" ref="deviateService" />
	</bean>
	<!-- 交易 -->
	<bean id="tradeService" class="com.alibaba.dubbo.demo.trade.TradeServiceImpl" />

	<bean id="tradeRestService" class="com.alibaba.dubbo.demo.trade.TradeRestServiceImpl">
		<property name="tradeService" ref="tradeService" />
	</bean>
	<!-- 梯形股票 -->
	<bean id="ladderService" class="com.alibaba.dubbo.demo.ladder.LadderServiceImpl" />

	<bean id="ladderRestService" class="com.alibaba.dubbo.demo.ladder.LadderRestServiceImpl">
		<property name="ladderService" ref="ladderService" />
	</bean>
	<!-- 梯形股票 -->

	<!-- 30日线 -->
	<bean id="codeService" class="com.alibaba.dubbo.demo.code.CodeServiceImpl" />

	<bean id="codeRestService" class="com.alibaba.dubbo.demo.code.CodeRestServiceImpl">
		<property name="codeService" ref="codeService" />
	</bean>
	<!-- 持仓信息 -->
	<bean id="inventoryService"
		class="com.alibaba.dubbo.demo.inventory.Impl.InventoryServiceImpl" />

	<bean id="inventoryRestService"
		class="com.alibaba.dubbo.demo.inventory.Impl.InventoryRestServiceImpl">
		<property name="inventoryService" ref="inventoryService" />
	</bean>
		<!-- 账户信息 -->
	<bean id="accountService"
		class="com.alibaba.dubbo.demo.account.Impl.AccountServiceImpl" />

	<bean id="accountRestService"
		class="com.alibaba.dubbo.demo.account.Impl.AccountRestServiceImpl">
		<property name="accountService" ref="accountService" />
	</bean>
	<bean id="anotherUserRestService"
		class="com.alibaba.dubbo.demo.user.facade.AnotherUserRestServiceImpl">
		<property name="userService" ref="userService" />
	</bean>

	<!-- mybitse -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/alibaba/dubbo/demo/dao/*.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->


	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!--basePackage指定要扫描的包，在此包之下的映射器都会被 搜索到。可指定多个包，包与包之间用逗号或分号分隔 -->
		<property name="basePackage" value="com.alibaba.dubbo.*.dao" />
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

</beans>